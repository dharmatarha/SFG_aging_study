function wavDir = createSFGstimuli(NStimuli, stimopt)
%% Creates a sequence of Nstimuli stochastic figure-ground (SFG) stimulus.
% 
% USAGE: wavDir = createSFGstimuli(NStimuli, stimopt)
%
% SFG-stimulus generator, where the parameters are supplied as a
% "stimopt" struct, usually generated by the SFGparams function. The 
% presence / absence of figure is controlled with figure coherence 
% (figureCoh field) - if set to 0, there is no figure in the stimuli.
%
% Generated sound samples are written in a folder (dd-mm-yyyy-hh-mm) 
% together with a csv file (dd-mm-yyyy-hh-mm-StimuliData.csv) that 
% describes the parameter settings of each generated stimulus. More 
% detailed chord information is written into a mat file 
% (dd-mm-yyyy-hh-mm-chordInfo.mat) in the same folder.
%
% Inputs:
% NStimuli      - number of stimuli to be generated
% stimopt       - struct containing stimulus parameters (both for 
%               background and figure). The list of fields required is
%               below, for details see SFGparams.m
%
% Outputs:
% wavDir        - name of the folder with the generated stimuli
%
% Fields of stimopt struct:
% sampleFreq, chordOnset, chordDur, figureMinOnset, figureOnset, 
% totalDur, toneComp, toneFreqMax, toneFreqMin, 
% toneFreqSetL, figureDur, figureCoh, figureStepS
%
% Based on earlier scripts by Tamas Kurics, Zsuzsanna Kocsis and Botond 
% Hajdu, ex-members of the lab.
% date: January 2020
%
% Notes:
% (1) Fix number of tones/chord, that is, figure coherence and background 
% tones always add up to the same total tone no. 
% (2) Check the resulting files with plotChords.m
%


%% Input checks, loading params

if nargin ~= 2
    wavDir = 0;
    error('Function createSFGstimuli requires input args "NStimuli" and "stimopt"!');
end
% sanity check for requested no. of stimuli
if ~ismembertol(NStimuli, 1:1000)
    error('Input arg NStimuli should be element of 1:1000, please double-check and edit the function if necessary!');
end
% minimal checks on stimopt arg
if ~isstruct(stimopt) || isempty(stimopt)
    error('Input arg "stimopt" should be a struct with a number of predefined fields! Check the help and/or SFGparams.m!');
end

% user message at function start
disp([char(10), 'Called createSFGstimuli function with input args:',...
    char(10), 'NStimuli: ', num2str(NStimuli),...
    char(10), 'stimopt: ']);
disp(stimopt);


%% Settings

% set random number generator if random seed was supplied
if isfield(stimopt, 'randomSeed')
    rng(stimopt.randomSeed); 
end

% if there is no value in stimopt.figureOnset, set it to nan
if isempty(stimopt.figureOnset)
    stimopt.figureOnset = nan;
end
% check the range of figureOnset
if stimopt.figureOnset < ceil(stimopt.figureMinOnset/stimopt.chordDur)
    error('The supplied figure onset value is below the minimum onset value!');
end

% generating logarithmically uniform frequency range for the random
% background
logFreq = linspace(log(stimopt.toneFreqMin), log(stimopt.toneFreqMax), stimopt.toneFreqSetL);

% number of chords in the stimulus
stimulusChordNumber = floor(stimopt.totalDur / stimopt.chordDur);

% number of samples in a chord
numberOfSamples = stimopt.sampleFreq * stimopt.chordDur;
timeNodes = (1:numberOfSamples) / stimopt.sampleFreq;

% creating a cosine ramp, number of samples in the ramp
numberOfOnsetSamples = stimopt.sampleFreq * stimopt.chordOnset;
onsetRamp = sin(linspace(0, 1, numberOfOnsetSamples) * pi / 2);
onsetOffsetRamp = [onsetRamp, ones(1, numberOfSamples  - 2*numberOfOnsetSamples), fliplr(onsetRamp)];

% setting the zeros in the output nam, ex.: filename001
digits = ceil(log10(NStimuli + 1));

% creating header for saved parameters
outFile = cell(NStimuli+1, 10);
outFile(1, :) = {'filename', 'totalDur', 'chordDur', 'chordOnset', ...
                 'figureDur', 'figureCoh', 'figureStepS', 'sampleFreq', ...
                 'figureStartInterval', 'figureEndInterval'};

% create directory for saving audio data + parameters files
c = clock;  % dir name based on current time
wavDir = strcat(date, '-', num2str(c(4)), num2str(c(5)));
dircount = 0;
while exist(wavDir, 'dir')
    dircount = dircount + 1;
    if dircount > 1
        wavDir = strsplit(wavDir, '_');
        wavDir = wavDir{1};
    end
    wavDir = strcat(wavDir, '_', num2str(dircount));
end
mkdir(wavDir);

% save out params/options to directory
paramsFile = ['./', wavDir, '/', wavDir, '_stimopt.mat'];
save(paramsFile, 'stimopt');

% user message
disp([char(10), 'Created stimulus directory at ', wavDir, ',',...
    char(10), 'prepared parameters/settings, now generating stimuli...']);


%% Stimulus generation loop
% Generate random chords with or without figure

% define possible frequency components for figure start, based on step size
% and figure duration
figureFreqIdx = 1:stimopt.toneFreqSetL-abs(stimopt.figureStepS)*(stimopt.figureDur-1); 
if stimopt.figureStepS < 0
    figureFreqIdx = figureFreqIdx+abs(stimopt.figureStepS)*(stimopt.figureDur-1);
end

% preallocating variables containing chord data
allBackgrFreqs = cell(NStimuli, stimulusChordNumber);
allFigFreqs = cell(NStimuli, stimulusChordNumber);

for stimNo = 1:NStimuli

    % setting figure random parameters for each stimulus if needed
    if stimopt.figureCoh ~= 0  % if there is a figure even
        if isnan(stimopt.figureOnset)  % if random onset is requested
            % setting figure random parameters for each stimulus
            figureIntervals = (round(stimopt.figureMinOnset/stimopt.chordDur) + 1):(round((stimopt.totalDur - stimopt.figureMinOnset)/stimopt.chordDur) - stimopt.figureDur + 1);
            figureStartInterval = figureIntervals(randi([1, length(figureIntervals)], 1));
            figureEndInterval   = figureStartInterval + stimopt.figureDur - 1;
        else  % else an offset was specified
            figureStartInterval = stimopt.figureOnset;
            figureEndInterval   = figureStartInterval + stimopt.figureDur - 1;
        end
    elseif stimopt.figureCoh == 0  % if there is no figure
        figureStartInterval = 0;
        figureEndInterval = 0;
    end
    
    % select starting freqs
    figureStartFreqIdx = figureFreqIdx(randperm(length(figureFreqIdx), stimopt.figureCoh));

    % add steps
    figureFreqsPerChord = repmat(figureStartFreqIdx', [1, stimopt.figureDur]);
    allFigureSteps = 0:stimopt.figureStepS:(stimopt.figureDur-1)*stimopt.figureStepS;  % all steps in one vector
    allFigureSteps = repmat(allFigureSteps, [stimopt.figureCoh, 1]);  % put steps into a matrix, one row for each figure component
    figureFreqsPerChord = figureFreqsPerChord+allFigureSteps;  % each column contains logFreq indices for one figure chord
        
    % initializing left and right speaker outputs
    soundOutput  = zeros(2, stimopt.sampleFreq * stimopt.totalDur);
    soundIndex = 1;  % counter for filling soundOutput with chords
   
    
    %% Chord loop

    for chordPos = 1:stimulusChordNumber 

        % number of background tones depends on the presence/absence of figure
        if (chordPos >= figureStartInterval) && (chordPos <= figureEndInterval)  % figure present

            % chord position relative to figure start (1 when chordPos==figureStartInterval)
            figChordPos = chordPos-figureStartInterval+1;

            % background freq components + figure freq components = stimopt.toneComp
            backgroundFreqsNo = stimopt.toneComp-stimopt.figureCoh; 

            % only tones not already in the figure can be used for background
            availableFreqsIdx = setdiff(1:stimopt.toneFreqSetL, figureFreqsPerChord(:, figChordPos)', 'stable');           

            % define figure frequencies
            figureFrequencies = round(exp(logFreq(figureFreqsPerChord(:, figChordPos)')));

            % creating figure tones for this chord
            figureTones = sin(2*pi*diag(figureFrequencies)*repmat(timeNodes, length(figureFrequencies), 1));

            % store figure freq values for chord
            allFigFreqs{stimNo, chordPos} = figureFrequencies;

        % if there is no figure, all frequencies can be used for background
        else
            backgroundFreqsNo = stimopt.toneComp;
            availableFreqsIdx = 1:stimopt.toneFreqSetL;
        end

        % selecting random background frequencies
        backgroundFreqIdx = availableFreqsIdx(randperm(length(availableFreqsIdx), backgroundFreqsNo));
        backgroundFreqs = round(exp(logFreq(backgroundFreqIdx)));

        % store figure freq values for chord
        allBackgrFreqs{stimNo, chordPos} = backgroundFreqs;

        % creating the tones for the background
        backgroundTones = sin(2*pi*diag(backgroundFreqs)*repmat(timeNodes,length(backgroundFreqs),1));

        % sum background plus figure, apply onset-offset ramp
        if (chordPos >= figureStartInterval) && (chordPos <= figureEndInterval)
            chord = (sum(backgroundTones, 1) + sum(figureTones, 1)).*onsetOffsetRamp;
        else
            chord = sum(backgroundTones, 1).*onsetOffsetRamp;
        end

        % chord data into aggregate stimulus array
        soundOutput(1:2, soundIndex:soundIndex+numberOfSamples-1) = repmat(chord, [2, 1]);  % both channels contain the same stimulus
        soundIndex = soundIndex + numberOfSamples;    

    end  % chordPos for loop
    
    % normalize left and right output to the range -1 <= amplitude <= 1
    maxSoundOutput = max(max(abs(soundOutput)));
    soundOutput  = soundOutput/maxSoundOutput;
    
    % save results to wav, add parameters to the cell array later saved out
    % to csv
    stimulusdigits = ceil(log10(stimNo + 1));
    temp = char('');
    for digind = 1:(digits-stimulusdigits)
        temp = strcat(temp, '0');
    end
    filename = strcat(wavDir, '-', temp, num2str(stimNo));
    outFile(stimNo+1, :) = {filename, stimopt.totalDur, stimopt.chordDur, stimopt.chordOnset, ...
                                 stimopt.figureDur, stimopt.figureCoh, stimopt.figureStepS, stimopt.sampleFreq, ...
                                 figureStartInterval, figureEndInterval};
    audiowrite(strcat('./', wavDir, '/', filename, '.wav'), soundOutput', stimopt.sampleFreq);    
    
    
end  % stimNo for loop


%% Save out parameters, user message, return

% save out detailed info about random background + figure chords
chordInfoFile = ['./', wavDir, '/', wavDir, '_chordInfo.mat'];
save(chordInfoFile, 'allBackgrFreqs', 'stimulusChordNumber',... 
    'NStimuli', 'allFigFreqs');

% Convert cell to a table and use first row as variable names
T = cell2table(outFile(2:end, :), 'VariableNames', outFile(1, :));
 
% Write the table to a CSV file, final user message
writetable(T,strcat('./', wavDir, '/', strcat(wavDir, '-', 'StimuliData.csv')));
disp([newline, 'Task done, files and parameters are saved to directory ', wavDir, newline]);


return







