function plotChords(folder, wavN)
%% Plot background + figure chords for SFG stimulus
%
% USAGE: plotChords(folder, wavN)
%
% Reads in and plots a given SFG stimulus, both in terms of the frequency
% components as described in the parameter files and in terms of the
% spectrogram. Assumes that wav files were generated with
% createSFGstimuli.m
%
% Inputs:
% folder        - Char array, path to folder of the wav files, containing 
%               also the parameter files (*-StimuliData.csv,
%               *_chordInfo.mat and *_stimopt.mat)
% wavN          - Stimulus number (wav files are numbered in folders
%               generated by createSFGstimuli.m)
%
% The only output is a figure with two subplots.
%


%% Input checks

if nargin ~=2 
    error('Require input args "folder" and "wavN"!');
end
if ~exist(folder, 'dir')
    error('Cannot find input arg "folder"!');
end
if ~ismembertol(wavN, 1:1000)
    error('Input arg "wavN" should be between 1:1000, please check again or rewrite the function!');
end

disp([char(10), 'Called function plotChords with inputs: ', char(10),...
    'folder: ', folder, char(10),...
    'wavN: ', num2str(wavN)]);


%% Basics, load params and audio

% load params
fileParts = regexp(folder,filesep,'split');
T = readtable([folder, '/', fileParts{end}, '-StimuliData.csv'], 'Delimiter', ',');
% extract filename
if wavN > size(T, 1)
    error('Input arg "wavN" exceeds number of wav files in supplied "folder"!');
else
    fileN = [folder, '/', T(wavN, :).filename{1}, '.wav'];
end

% load audio
[wavData, wavFs] = audioread(fileN); 

% extract audio and figure features
fs = T(wavN, :).sampleFreq;  % sampling freq (Hz)
dur = T(wavN, :).totalDur;  % duration of stimulus in secs
chordDur = T(wavN, :).chordDur;  % chord duration in secs
figDur = T(wavN, :).figureDur;  % figure duration in chords
figCoh = T(wavN, :).figureCoh;  % figure coherence in chords
figStepSize = T(wavN, :).figureStepS;  % figure step size (within the frequency grid)
figStart = T(wavN, :).figureStartInterval;  % figure start time in chords
figEnd = T(wavN, :).figureEndInterval;  % last figure element in chords

% load detailed chord information
chordF = [folder, '/', fileParts{end}, '_chordInfo.mat'];
load(chordF);
% chord info for given stimulus
backgChords = allBackgrFreqs(wavN, :);
figChords = allFigFreqs(wavN, :);
chordN = size(backgChords, 2);

% check stimulus generation options for the frequency range used
stimoptF = [folder, '/', fileParts{end}, '_stimopt.mat'];
load(stimoptF);
freqLimits = [stimopt.toneFreqMin, stimopt.toneFreqMax];
maxSize = max(stimopt.toneComp);

% sanity checks
if ~isequal(wavFs, fs) || ~isequal(size(wavData, 1), dur*fs)
    error('Sampling frequency or audio length from wav files does not match the parameters saved into StimuliData.csv!');
end
if ~isequal(dur/chordDur, size(backgChords, 2)) || ...
        ~isequal(dur/chordDur, size(figChords, 2))
    error('Stimulus duration from parameters file does not match that from chordInfo file!');
end

% user message
disp([char(10), 'Properties of stimulus no. ', num2str(wavN), ' according to parameter files:', char(10),...
    'Figure coherence level: ', num2str(figCoh), char(10),...
    'Figure step size: ', num2str(figStepSize), char(10),...
    'Figure duration: ', num2str(figDur), ' chords', char(10),...
    'Figure starts at chord: ', num2str(figStart), char(10),...
    'Figure ends at chord: ', num2str(figEnd), char(10),...
    'Chord duration: ', num2str(chordDur*1000), ' ms', char(10),...
    'Total stimulus duration: ', num2str(dur*1000), ' ms']);


%% Arrange detailed chord info for plotting

% Background info
% get chord info into numeric array
backgFreqs = nan(chordN, maxSize);
for i = 1:chordN
    backgFreqs(i, 1:size(backgChords{1, i}, 2)) = backgChords{1, i};
end

% Figure info
% get chord info into numeric array
figFreqs = nan(chordN, figCoh);
for i = 1:chordN
    if ~isempty(figChords{1, i})
        figFreqs(i, :) = figChords{1, i};
    end
end
% check if figure frequencies are indeed between params figStart and figEnd
if ~isequal(find(any(figFreqs, 2)), [figStart:figEnd]')
    error('Positions of figure frequencies from chordInfo.mat do not match the start and end positions from StimuliData.csv!');
end


%% Plotting: chord info and spectrogram into two subplots 

% we leave this here so that we can create multiple figures when calling
% the function in a loop
figure(wavN);

% plot detailed chord info first (left)

subplot(1, 2, 1);
plot(backgFreqs, 'bo');
hold on;
plot(figFreqs, 'r*', 'LineWidth', 3);  % emphasize figure frequency components
% two black lines mark figure start and end times
linX = [figStart-0.5, figEnd+0.5; figStart-0.5, figEnd+0.5];
linY = [freqLimits(1)-100, freqLimits(1)-100; freqLimits(2)+600, freqLimits(2)+600];
line(linX, linY, 'Color', 'k', 'LineWidth', 2);
% subplot details
title({'Background and figure chords used for generating', ['stim. ', num2str(wavN), ' in ', folder]});
xlabel('Chord number');
ylabel('Frequency (Hz)');
hold off;
set(gca, 'FontSize', 14);

% plot the spectrogram second (right)

subplot(1, 2, 2);
% values for frequencies of interest
fValues = linspace(1, (ceil(freqLimits(2)/1000))*1000, 1000);
spectrogram(wavData(:,1), dur/chordN*fs, 0, fValues, fs, 'yaxis', 'MinThreshold', -70);
hold on; 
% two white lines mark figure start and end times
linX = [(figStart-1)*dur/chordN, figEnd*dur/chordN; (figStart-1)*dur/chordN, figEnd*dur/chordN];
linY = [(freqLimits(1)-100)/1000, (freqLimits(1)-100)/1000; (freqLimits(2)+600)/1000, (freqLimits(2)+600)/1000];
line(linX, linY, 'Color', 'w', 'LineWidth', 2);
% white markers for figure chords
markerX = [(figStart-0.5)*dur/chordN:dur/chordN:(figEnd-0.5)*dur/chordN];
markerFreqs = figFreqs;
markerFreqs(isnan(markerFreqs)) = 0;
markerFreqs(ismember(markerFreqs, zeros(1, figCoh), 'rows'), :) = [];
plot(markerX, markerFreqs/1000, 'wx', 'LineWidth', 2, 'MarkerSize',12);  % emphasize figure frequency components
% subplot details
title({['Spectrogram of stim. ', num2str(wavN)], [' in ', folder]});
hold off;

% Set overall figure features
set(gcf,'color','w');
figureTitle = ['StimNo_', num2str(wavN), 'Coh_', num2str(figCoh), '__Dur_', num2str(figDur)];
set(gcf, 'NumberTitle', 'off', 'Name', figureTitle);
set(gca, 'FontSize', 14);
set(gcf, 'Units', 'Normalized', 'OuterPosition', [0.1, 0.1, 0.9, 0.9]);


return





